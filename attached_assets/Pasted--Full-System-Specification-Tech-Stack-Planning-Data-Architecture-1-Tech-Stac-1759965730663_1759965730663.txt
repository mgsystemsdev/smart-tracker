# **üìò Full System Specification: Tech Stack, Planning & Data Architecture**

---

## **1. Tech Stack Page (Default State & KPI Expansion)**

- All components appear **closed by default**.
- The KPI section must provide **expanded, detailed analytics**, including:
    - Total number of sections
    - Percentage of sections practiced
    - Percentage studied
    - Additional per-stack performance metrics

---

## **2. Cross-Page Edit Synchronization**

- All edits must **sync evenly across every page** where the same data element appears.
- Linked sections update globally; independent input forms maintain **isolated edit scopes**.
- The system distinguishes shared vs. independent zones to ensure accuracy and prevent cross-contamination.

---

## **3. Entry Section (Smart Inputs & Dropdown Manager)**

- Inputs are **logical and dependency-driven**, adapting dynamically to dropdown selections.
- Dropdowns can be populated from **existing data** or **user-created entries**.
- When the user types and presses Enter, the new entry is **saved automatically**.
- A **dedicated ‚ÄúDropdown Manager‚Äù page** manages all dropdown data centrally:
    - Edits and corrections occur there, not inline.
    - Ensures consistent dropdown values across all forms.

---

## **4. Hierarchical Dependency System**

- Input forms follow a **nested dependency structure** (folder-within-folder logic).
- The first field defines the root; each subsequent one filters options based on the prior selection.
- Users can **branch into alternate hierarchies** without data loss.
- Supports deep-level dependencies, rerouting, and re-mapping logic seamlessly.

---

## **5. Strategic Dependency Design**

- The dependency model is **strategically architected**, ensuring consistent data flow, scalability, and reusability.
- The logic pattern must remain intact to preserve predictable behavior across all dependencies.

---

## **6. Page Calculator (Workload & KPI Estimation)**

- Aggregates total work hours from all sources (especially the Planning Page).
- Displays **KPI cards** showing time-to-completion metrics in **days, weeks, months, and total hours**.
- A **top input bar with a dropdown selector** allows flexible calculation:
    - Example: Enter ‚Äú40‚Äù + select ‚ÄúHRS‚Äù ‚Üí system outputs equivalent totals (days, weeks, months, etc.).
    - Unit-aware logic recalculates all KPI cards dynamically.
- Acts as the analytical engine feeding from Planning totals.

---

## **7. Tech Stack Management Page (Dedicated CRUD Interface)**

- A standalone page for **creating, editing, updating, and deleting** Tech Stack entries.
- Removes all CRUD functionality from the Home Page.
- Clean, structured layout optimized for data management and version safety.
- Serves as the authoritative interface for all stack-related data maintenance.

---

## **8. Home Page (Informational & KPI Dashboard)**

- Functions as a **real-time operations dashboard**, not an editing space.
- Displays system-wide analytics and summaries, such as:
    - Recent edits and updates
    - Progress by section or module
    - Time worked, completion percentages, and activity timestamps
- Provides high-level awareness of what‚Äôs happening across all pages and components.
- Serves as a **notification hub and KPI overview**.

---

## **9. SQL Sustainable Memory (Persistent Database Layer)**

- Implement **SQLite3** as the persistent storage layer within the repository.
- Database contains multiple structured tables for:
    - Dropdown dependencies
    - Input form data
    - KPIs and calculated metrics
    - User-generated entries and metadata
- All data writes are **immediately saved to SQLite** (no reliance on volatile JSON).
- The database file is stored in the GitHub repo for **versioned persistence**.
- On app initialization, data loads automatically from SQLite, restoring full user state.

---

## **10. App Reboot & Data Clean Behavior**

- JSON-based memory is being replaced by persistent SQLite storage.
- On reboot or wake, the app executes a **data load routine** that rebuilds in-memory state from the database.
- Optional logic can clean transient session data, but all user-generated data is **restored from persistent storage**.

---

## **11. Planning Page (Titles, Headers & Totals)**

- **Planning Titles:**
    - Toggleable, all closed by default except the **Grand Total Title** (always open).
    - Pages always load **from the top position** on open or refresh.
- **Planning Header:**
    - A **banner at the top** displays relevant KPIs and metrics for planning progress.
    - Designed with visually clear cards or boxes summarizing key indicators.
- **Planning Overall Total:**
    - The **Grand Total card** anchors the page‚Äôs end.
    - Beneath it, add **supporting KPI boxes and analytics** derived from totals.
    - These KPIs feed directly into the **Page Calculator** for workload projections.

---

‚úÖ **System Summary**

- **SQLite3** ensures sustainable memory and persistence.
- **Tech Stack Management** is modularized and separate from dashboards.
- **Home Page** serves as a live KPI feed across all pages.
- **Planning + Calculator + SQL** form a full analytical pipeline from data entry ‚Üí dependency logic ‚Üí workload metrics.
- Every page maintains a consistent visual hierarchy and state logic (closed-by-default, top-load behavior, synchronized edits).

---

### The big shift

The original brainstorm mixed two kinds of fields:

- **Structural fields**: the ones that create the logical dependency chain (Technology, Work Item, Skill, Category Name ‚Ä¶).
- **Context fields**: all the rest‚Äîuseful for analytics but not for dropdown logic.

The problem: the first draft had redundancy, partial overlaps (‚Äúnew technology name,‚Äù ‚Äúcategory for new technologies‚Äù), and non-essential placeholders.

The goal became: **keep only fields that (a)** drive hierarchy, **(b)** give analytical power, and **(c)** support sustainable storage.

Everything else either merged, moved into notes/tags, or became its own lookup table later.

---

## 1. Session Date

**Kept & prioritized.**

You can‚Äôt compute streaks, trends, or totals without time. It‚Äôs a pure context field that anchors every other metric.

---

## 2. Session Type

**Simplified from ‚ÄúType‚Äù + intent fields.**

Captures *why* the session happened (practice, study, etc.).

That‚Äôs enough to classify effort without over-engineering a workflow table.

---

## 3. Category Name ‚Äì Root dependency

**Promoted to the top of the chain.**

Originally lower in the list, now the conceptual root because you learn in domains (‚ÄúMain Language‚Äù, ‚ÄúDatabase‚Äù) before tools.

It defines the mental buckets of your system.

---

## 4. Technology

**Kept but made dependent on Category.**

It used to be the root; now it sits under Category ‚Üí Technology to reflect your *concept-first* learning.

Removes noise‚Äîtechnologies now live only where they make sense.

---

## 5. Work Item

**Refined from multiple overlapping idea fields.**

Originally there were things like ‚ÄúWork Item,‚Äù ‚ÄúTask,‚Äù ‚ÄúUnit.‚Äù

Merged into one that represents the actionable piece of work under each Technology.

Granular enough for planning, still generic across stacks.

---

## 6. Skill / Topic

**Kept and clarified.**

Represents the micro-skill practiced within a work item.

Acts as the ‚Äúleaf‚Äù of your dependency tree and the atomic unit for KPIs and mastery tracking.

---

## 7. Category Source

**Retained but generalized.**

The old list had separate fields for platform and resource links.

Condensed into one neutral field capturing where learning came from (Coursera, Docs, etc.).

That gives you efficiency analytics without clutter.

---

## 8. Difficulty

**Simplified; converted from numeric scales to qualitative tiers.**

Beginner/Intermediate/Advanced is enough for trend weighting and keeps input friction low.

---

## 9. Status

**Kept; normalized workflow indicator.**

All those ‚Äúin progress / complete‚Äù booleans became a single controlled list.

Drives dashboards and progress tracking cleanly.

---

## 10. Hours Spent

**Kept verbatim but elevated in importance.**

Forms the quantitative backbone for the Calculator & Planning pages.

No derivations or secondary time fields needed‚Äîjust one precise metric.

---

## 11. Tags

**New consolidation.**

Instead of multiple categorical helpers (‚Äúlabel,‚Äù ‚Äúflag,‚Äù ‚Äútheme‚Äù), one flexible free-text field handles them all.

Extensible without schema edits and perfect for AI or search features.

---

## 12. Notes

**Condensed from every commentary or reflection field.**

All contextual or ‚Äúexplanation‚Äù boxes merged here.

Provides qualitative depth without multiplying columns.

---

## 13. Session ID

**Added for database health.**

Not originally in the brainstorm but essential for relational design.

Gives every record a primary key so foreign keys and joins work later.

---

### Why the others were removed

| Removed Concept | Why |
| --- | --- |
| **New Technology Name / Category (for new tech)** | Redundant once the system supports adding values dynamically. |
| **Category Type / Source split** | Merged into a single ‚ÄúCategory Source.‚Äù |
| **Extra progress or repetition counters** | Computed from data; no need for static columns. |
| **Temporary input or UI-specific flags** | Belong in app logic, not persistent schema. |

---

### Design principles behind the reduction

1. **One concept = one column** ‚Äì avoid duplicates that track the same thing in different forms.
2. **Organic expansion** ‚Äì all dropdowns self-populate; no pre-seeded taxonomies.
3. **Context separation** ‚Äì dependencies handle structure; everything else is metadata.
4. **Persistence & clarity** ‚Äì SQLite favors a lean schema for fast writes and future normalization.
5. **Cognitive mirroring** ‚Äì the order follows how *you* think:
    
    *Category ‚Üí Technology ‚Üí Work Item ‚Üí Skill ‚Üí Context.*
    

---

### End result

Thirteen columns, each with a clear role:

- **4 hierarchical dependencies** that define *where* and *what* you worked on.
- **8 contextual/analytic fields** that define *how, when, and why* you did it.
- **1 structural field** (Session ID) ensuring database integrity.

Everything else‚Äîtransient, redundant, or UI-specific‚Äîwas intentionally pruned so the schema stays sustainable, expressive, and fast.

---

| # | **Column** | **Description** | **Dependency** | **Purpose / Value** |
| --- | --- | --- | --- | --- |
| **1** | **Session Date** | The exact date of the learning or work session. | *(Independent)* | Anchors all activity chronologically ‚Äî drives streaks, time-based KPIs, and planning analytics. |
| **2** | **Session Type** | Nature of the session: *Practice*, *Study*, *Research*, *Planning*, etc. | *(Independent)* | Defines session intent ‚Äî feeds effort-type segmentation and planning metrics. |
| **3** | **Category Name** | Conceptual domain (e.g., *Main Language*, *Database*, *Backend*, *Frontend*). | **Root Dependency** | Entry point of your personal hierarchy ‚Äî organizes learning areas and drives Category-first dependency flow. |
| **4** | **Technology** | Specific technology, framework, or language (e.g., *Python*, *React*, *PostgreSQL*). | **Depends on ‚Üí Category Name** | Narrows work scope within a category ‚Äî central to analytics and time allocation metrics. |
| **5** | **Work Item** | The specific component, module, or unit of work (e.g., *Variables*, *Joins*, *Components*). | **Depends on ‚Üí Technology** | Defines tangible tasks; filters Skill/Topic options; key for operational KPIs. |
| **6** | **Skill / Topic** | The precise sub-skill or micro-concept (e.g., *List Comprehension*, *Query Optimization*). | **Depends on ‚Üí Work Item** | Most granular learning unit ‚Äî enables micro-KPI tracking and mastery depth analysis. |
| **7** | **Category Source** | Where the work or learning originated (e.g., *Coursera*, *Docs*, *YouTube*, *Project Repo*). | *(Independent context field)* | Tracks effectiveness of content sources and learning ROI. |
| **8** | **Difficulty** | Subjective difficulty rating (*Beginner*, *Intermediate*, *Advanced*). | *(Independent context field)* | Used for effort weighting and learning velocity analysis. |
| **9** | **Status** | Current progress state (*Planned*, *In Progress*, *Completed*, *Blocked*). | *(Independent context field)* | Drives dashboards, workflow metrics, and completion KPIs. |
| **10** | **Hours Spent** | Time invested in this session (e.g., *1.25* hours). | *(Independent context field)* | Quantitative metric powering the Page Calculator, Planning, and Time Efficiency analysis. |
| **11** | **Tags** | Flexible labels (e.g., *#backend*, *#refactor*, *#review*). | *(Independent context field)* | Enables dynamic grouping, trend exploration, and AI-driven categorization. |
| **12** | **Notes** | Open text for qualitative context ‚Äî reflections, blockers, ideas. | *(Independent context field)* | Adds narrative context for retrospectives, learning logs, and qualitative analytics. |
| **13** | **Session ID** | Unique identifier (UUID or auto-increment). | *(Independent)* | Ensures clean relational integrity for joins and future normalization. |

```python
Category Name
   ‚Üì
   Technology
      ‚Üì
      Work Item
         ‚Üì
         Skill / Topic

```

- **Root:** Category Name ‚Äî defines conceptual domain.
- Each lower field dynamically filters based on the one above.
- Dropdowns begin **empty** and **self-populate** with every new session entry, forming a personalized knowledge graph.

---

## üß† **System Behavior Summary**

| Type | Behavior | Purpose |
| --- | --- | --- |
| **Root Dependency Chain** | Category ‚Üí Technology ‚Üí Work Item ‚Üí Skill/Topic | Models how you *learn*: concept ‚Üí tool ‚Üí detail. |
| **Independent Context Fields** | Session Date, Session Type, Source, Difficulty, Status, Hours, Tags, Notes | Provide context and metadata for analytics; not used for filtering logic. |
| **Persistence (SQLite)** | New values persist across sessions; DB evolves with use. | Creates a durable, self-curating system that grows with your experience. |

---

## üìä **Analytical Role Summary**

| KPI Type | Primary Columns | Insights Produced |
| --- | --- | --- |
| **Time-Based KPIs** | Session Date, Hours Spent | Velocity, streaks, scheduling efficiency |
| **Learning Balance** | Session Type, Category Name | Distribution of effort across learning types |
| **Progress Tracking** | Status, Hours Spent | Completion rates and throughput trends |
| **Skill Growth** | Skill/Topic, Difficulty | Mastery trajectory and performance intensity |
| **Source Analysis** | Category Source | Efficiency of learning sources |
| **Focus Profiling** | Tags | Topic clustering and trend detection |

---

## üíæ **Persistence & Scalability**

- **Storage:** SQLite (repo-local sustainable memory).
- **Behavior:** Each new dropdown entry or session record writes permanently to the DB.
- **Growth Pattern:** Starts minimal; expands only through your own activity ‚Äî no external data noise.
- **Future-Ready:** Schema supports normalization (split tables per entity) if scaling beyond solo use.