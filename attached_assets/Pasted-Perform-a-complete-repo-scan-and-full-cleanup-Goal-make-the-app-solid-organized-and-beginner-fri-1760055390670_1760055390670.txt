Perform a complete repo scan and full cleanup.
Goal: make the app solid, organized, and beginner-friendly — with professional-level structure and efficiency.

🧩 1. Repository Scan

Scan all files, modules, and directories across the project.

Identify:

Unused imports, dead code, and redundant functions.

Misconfigured environment variables or broken dependencies.

Outdated, insecure, or unused packages.

Inefficient or unlinked database reads/writes.

Logic errors and duplicate components.

🗂️ 2. Folder Structure Reorganization

Reorganize the entire repo into a clean, beginner-friendly architecture, keeping readability and scalability balanced.

Structure target (adjust based on framework):

/src
  /components        → UI or feature modules
  /routes            → API endpoints or page routes
  /services          → business logic, external integrations
  /db                → database models, migrations, config
  /utils             → helper functions, constants
  /tests             → unit/integration tests
  /config            → environment and setup files
/main.py (or app.js, index.js, etc.)


Rules:

Group by purpose, not file type.

Keep entry points clean — one main app runner.

Remove or merge folders that only contain one small file.

Flatten unnecessary nesting (avoid deeply nested paths).

Maintain import consistency after moving files.

🗄️ 3. Database Validation

Confirm all connections and schema align with the app logic.

Remove unused tables, models, or foreign keys.

Check ORM models and migrations are synchronized.

Verify all CRUD operations work and data flows correctly.

⚙️ 4. Dependencies & Config

Clean up all dependency files (requirements.txt, package.json, etc.).

Remove unneeded libraries, pin correct versions.

Ensure .env and config files reference correct variable names and paths.

🚀 5. Optimization Pass

Refactor performance bottlenecks.

Simplify repetitive logic and long functions.

Improve naming clarity and inline documentation for readability.

Verify all modules and routes connect properly.

🧾 6. Deliverables

Output a clear summary including:

All issues found (critical / moderate / minor).

List of structural and code changes made.

Recommended follow-ups (if any).

Final confirmation that:

All files are properly linked.

Database reads/writes are correct.

Folder structure is beginner-friendly yet clean.

The repo is stable, optimized, and production-ready.

Intent for Ghostwriter:
Treat this as a “repo health, cleanup, and structure optimization mission.”
You’re not just fixing — you’re teaching through structure.
Everything should look clean, readable, and maintainable to a beginner, but solid enough for scaling later.